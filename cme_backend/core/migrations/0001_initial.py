# Generated by Django 4.2.17 on 2024-12-23 22:06

import core.managers
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_column='tx_username', max_length=64, unique=True)),
                ('password', models.CharField(db_column='tx_password', max_length=128)),
                ('name', models.CharField(db_column='tx_name', max_length=256, null=True)),
                ('email', models.CharField(blank=True, db_column='tx_email', max_length=256, null=True)),
                ('last_login', models.DateTimeField(db_column='dt_last_login', null=True)),
                ('is_active', models.BooleanField(db_column='cs_active', default=True)),
                ('is_superuser', models.BooleanField(db_column='cs_superuser', default=False, null=True)),
                ('is_staff', models.BooleanField(db_column='cs_staff', default=False, null=True)),
                ('is_default', models.BooleanField(db_column='cs_default', default=False)),
                ('type', models.CharField(choices=[('T', 'TÃ©cnico'), ('N', 'Enfermagem'), ('A', 'Administrativo')], db_column='cs_type', default='A', max_length=1, verbose_name='Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'managed': True,
            },
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
    ]
